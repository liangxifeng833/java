<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!-- 配置自动扫描的包 -->
    <context:component-scan base-package="com.atguigu.springmvc"></context:component-scan>
    
    <!-- 配置视图解析器：如何把handler方法返回值解析为实际的物理视图 -->
    <!--  InternalResourceViewResolver 的优先级是Interger的最大值-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    
        <!--  
        default-servlet-handler 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler,
        它会对进入 DispatcherServlet 的请求进行筛查, 如果发现是没有经过映射的请求, 就将该请求交由 WEB 应用服务器默认的 
        Servlet 处理. 如果不是静态资源的请求，才由 DispatcherServlet 继续处理

        一般 WEB 应用服务器默认的 Servlet 的名称都是 default.
        若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定  
    -->
     <mvc:default-servlet-handler/>
    <!-- 配置以上可以访问静态资源后，保证正常controller依然可以正常访问,需要配置mvc:annotation-driven -->
     <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
     <!-- 配置conversionService自定义转换器 -->
     <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="employeeConverter"/>
            </set>
        </property>
     </bean>
     
     <!-- 配置国际化资源文件,用来验证错误信息显示 -->
     <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n"></property>
     </bean>
    
    <!-- 国际化测试,配置直接请求jsp页面 --> 
     <mvc:view-controller path="i18n" view-name="i18n"/>
     <mvc:view-controller path="i18n2" view-name="i18n2"/>
     
     <!-- 配置SessionLocalResolver和LoaclChangeInterceptor拦截器, 可以通过超链接切换 Locale而不再依赖于浏览器的语言设置情况-->
     <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>    
     <mvc:interceptors>
        <!-- 配置自定义的拦截器 -->
        <bean class="com.atguigu.springmvc.interceptors.FirstInterceptor"></bean>
        
        <!-- 配置拦截器 起/不起 作用的路径,也就是针对指定目标方法实现拦截 -->
        <mvc:interceptor>
            <mvc:mapping path="/emp" />
            <bean class="com.atguigu.springmvc.interceptors.SecondInterceptor"></bean>
        </mvc:interceptor>
        
        <!-- 配置LoaclChangeInterceptor拦截器 -->
        <bean  class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
     </mvc:interceptors>
     
     <!-- 配置文件上传相关 -->
     <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="maxUploadSize" value="1024000"></property>
     </bean>
     
     <!-- 配置SimpleMappingExceptionResolver类映射异常 -->
     <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 可以在对应jsp访问的异常属性定义名称, 默认=exception -->
        <property name="exceptionAttribute" value="ex"></property>
        <!-- 将异常映射到对应的 error.jsp 页面中 -->
        <property name="exceptionMappings">
            <props>
                <!-- 映射数组越界异常到 error.jsp 页面中 -->
                <prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
            </props>
        </property>
     </bean>
     
     

</beans>
